name: cmake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  TARGET_ARCH: linux64

jobs:
  build:
    runs-on: ubuntu-20.04

    name: Build AVP64

    env:
      SYSTEMC_HOME: ${{github.workspace}}/systemc/2.3.3

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Dependencies
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt-get install libelf-dev libsdl2-dev libvncserver-dev

      - name: Cache SystemC
        id: cache-systemc
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/systemc
          key: cache-systemc-2.3.3-${{runner.os}}

      - name: Download SystemC
        if: steps.cache-systemc.outputs.cache-hit != 'true'
        run: deps/vcml/utils/setup-systemc -p ${{github.workspace}} -v 2.3.3

      - name: Patch ocx-qemu-arm
        run: |
          git apply ${{github.workspace}}/patches/ocx-qemu-arm-disable-tests.patch
          git apply ${{github.workspace}}/patches/ocx-qemu-arm-fix_unicorn_debug_build.patch
        working-directory: ${{github.workspace}}/deps/ocx-qemu-arm

      - name: Patch unicorn
        run: |
          git apply ${{github.workspace}}/patches/unicorn-fix-breakpoint.patch
          git apply ${{github.workspace}}/patches/unicorn-fix-pmu.patch
          git apply ${{github.workspace}}/patches/unicorn-fix-wfi-hint.patch
        working-directory: ${{github.workspace}}/deps/ocx-qemu-arm/unicorn

      - name: Configure
        run: CXXFLAGS="-Wall -Werror" cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j $(nproc)
      - name: Test
        env:
          LD_LIBRARY_PATH: ${{github.workspace}}/build/ocx-qemu-arm
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
